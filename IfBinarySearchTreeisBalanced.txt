 @Override
  public boolean isBalanced() {
    return (maxDepth() - minDepth()) <= 1;
  }

  @Override
  public int maxDepth() {
    return maxDepth(root);
  }

  private int maxDepth(Node<K, V> root) {
    // Exit condition for recursion
    if (null == root) {
      return 0;
    }
    // recursively find the max depth of left and right child and select the
    // maximum depth among them
    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
  }

  @Override
  public int minDepth() {
    return minDepth(root);
  }

  private int minDepth(Node<K, V> root) {
    // Exit condition for recursion
    if (null == root) {
      return 0;
    }
    // recursively find the minimum depth of left and right child and select
    // the minimum depth among them
    return 1 + Math.min(minDepth(root.left), minDepth(root.right));
  }